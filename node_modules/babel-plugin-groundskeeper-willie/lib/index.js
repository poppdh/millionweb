/**
 * @fileoverview This is the main functionality for the Groundskeeper willie
 * plugin.
 * @author Jacques Favreau (@betaorbust)
 */
'use strict';

var helpers = require('./helpers.js'); // All the plugin helper functions.

var DEFAULTS = {
    disableLineMatcher: /^\s*groundskeeper(-willie)?-disable-line\s*$/i, // Not currently possible  to set due to regex in JSON
    pragmaMatcher: /^\s?<(\/?)([\w\d\-]*)>\s*$/, // Not currently possible to set due to regex in JSON
    removeConsole: true,
    removeDebugger: true,
    removePragma: true
};

/**
 * The set of visitors this plugin will register.
 * @type {Object}   The visitor definition
 */
var removeGroundskeeperElements = {
    // Unfortunately, because there is currently no way to say "Remove everything
    // between these lines" we have to check each element's position relative to
    // the pragma comments.
    enter: function enter(path, state) {
        if (state.removePragma && helpers.isInsidePragma(path.node, state.gkPragmas)) {
            path.remove();
        }
    },

    // We're removing all console calls unless they're disabled via a line directive.
    CallExpression: function CallExpression(path, state) {
        var isConsole = path.get("callee").matchesPattern("console", true);
        if (isConsole && state.removeConsole && !helpers.isOnDisabledLine(state.gkDisabledLines, path)) {
            path.remove();
        }
    },

    // We're removing all debugger calls unless they're disabled via a line directive.
    DebuggerStatement: function DebuggerStatement(path, state) {
        if (state.removeDebugger && !helpers.isOnDisabledLine(state.gkDisabledLines, path)) {
            path.remove();
        }
    }
};

/**
 * The actual export for the plugin.
 * Because comments are not first-class citizens of the AST, we need to do all
 * comment calculations up front.
 * @param  {Object} babel The babel singleton.
 * @return {Object}       The plugin visitors.
 */
module.exports = function (babel) {
    return {
        visitor: {
            Program: function Program(path, state) {
                // If no options are missing, use our defaults.
                state.opts = Object.assign({}, DEFAULTS, state.opts);
                var comments = path.parent && path.parent.comments ? path.parent.comments : [];
                var disabledLines = helpers.fetchDisabledLines(comments, state.opts.disableLineMatcher);
                var pragmaRegions = state.opts.removePragma ? helpers.fetchPragmas(comments, state.opts.pragmaMatcher) : [];
                path.traverse(removeGroundskeeperElements, Object.assign({
                    gkDisabledLines: disabledLines,
                    gkPragmas: pragmaRegions
                }, state.opts));
            }
        }
    };
};